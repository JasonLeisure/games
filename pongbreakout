<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        canvas {
            display: block;
            margin: auto;
            background-color: #000;
        }
    </style>
    <title>Pong Breakout Combo</title>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <script>
        // Get the canvas and context
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        // Ball properties
        const ball = {
            x: canvas.width / 2,
            y: canvas.height / 2,
            radius: 10,
            speed: 5,
            dx: 5,
            dy: 5
        };

        const playerPaddle = {
    width: 10,
    height: 80,
    x: 0,
    y: canvas.height / 2 - 40,
    speed: 22 // Adjust this value to make the paddle move faster
};

const enemyPaddle = {
    width: 10,
    height: 80,
    x: canvas.width - 20, // Adjust the x-coordinate to move it behind the bricks
    y: canvas.height / 2 - 40,
    speed: 3
};

        // Brick properties
        const bricks = {
            rows: 5,
            columns: 5,
            width: 50,
            height: 20,
            padding: 10,
            offsetX: 50,
            offsetY: 50
        };

        // Create bricks array
        const brickArray = [];
        for (let i = 0; i < bricks.rows; i++) {
            brickArray[i] = [];
            for (let j = 0; j < bricks.columns; j++) {
                brickArray[i][j] = { x: 0, y: 0, status: 1 }; // status 1 means the brick is active
            }
        }

        // Scoring
        let score = 0;

        // Event listeners for paddle movement
        document.addEventListener("keydown", keyDownHandler);
        document.addEventListener("keyup", keyUpHandler);

        function keyDownHandler(e) {
            if (e.key == "Down" || e.key == "ArrowDown") {
                playerPaddle.y += playerPaddle.speed;
            } else if (e.key == "Up" || e.key == "ArrowUp") {
                playerPaddle.y -= playerPaddle.speed;
            }
        }

        function keyUpHandler(e) {
            if (e.key == "Down" || e.key == "ArrowDown" || e.key == "Up" || e.key == "ArrowUp") {
                playerPaddle.y += 0; // Stop the paddle when the key is released
            }
        }

        // Collision detection function
        function collisionDetection() {
            // Check collision with player paddle
            if (
                ball.x - ball.radius < playerPaddle.x + playerPaddle.width &&
                ball.x + ball.radius > playerPaddle.x &&
                ball.y - ball.radius < playerPaddle.y + playerPaddle.height &&
                ball.y + ball.radius > playerPaddle.y
            ) {
                ball.dx = -ball.dx; // Reverse ball direction
            }

            // Check collision with enemy paddle
            if (
                ball.x - ball.radius < enemyPaddle.x + enemyPaddle.width &&
                ball.x + ball.radius > enemyPaddle.x &&
                ball.y - ball.radius < enemyPaddle.y + enemyPaddle.height &&
                ball.y + ball.radius > enemyPaddle.y
            ) {
                ball.dx = -ball.dx; // Reverse ball direction
            }

            // Check collision with bricks
            for (let i = 0; i < bricks.rows; i++) {
                for (let j = 0; j < bricks.columns; j++) {
                    const b = brickArray[i][j];
                    if (b.status === 1) {
                        if (
                            ball.x > b.x &&
                            ball.x < b.x + bricks.width &&
                            ball.y > b.y &&
                            ball.y < b.y + bricks.height
                        ) {
                            b.status = 0; // Brick hit, set status to 0 (inactive)
                            ball.dx = -ball.dx; // Reverse ball direction
                            score += 10; // Increase the score
                        }
                    }
                }
            }

            // Check if the ball passes the paddles
            if (ball.x + ball.radius > canvas.width || ball.x - ball.radius < 0) {
                // Respawn the ball
                ball.x = canvas.width / 2;
                ball.y = canvas.height / 2;
                ball.dx = -ball.dx;
                score -= 10; // Decrease the score for missing the ball
            }
        }

        // Draw functions
        function drawBall() {
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fillStyle = "#fff";
            ctx.fill();
            ctx.closePath();
        }

        function drawPaddle(x, y, width, height) {
            ctx.beginPath();
            ctx.rect(x, y, width, height);
            ctx.fillStyle = "#fff";
            ctx.fill();
            ctx.closePath();
        }

        function drawBricks() {
            for (let i = 0; i < bricks.rows; i++) {
                for (let j = 0; j < bricks.columns; j++) {
                    if (brickArray[i][j].status === 1) {
                        const brickX = j * (bricks.width + bricks.padding) + bricks.offsetX;
                        const brickY = i * (bricks.height + bricks.padding) + bricks.offsetY;
                        brickArray[i][j].x = brickX;
                        brickArray[i][j].y = brickY;
                        ctx.beginPath();
                        ctx.rect(brickX, brickY, bricks.width, bricks.height);
                        ctx.fillStyle = "#fff";
                        ctx.fill();
                        ctx.closePath();
                    }
                }
            }
        }

        // Main draw function
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw elements
            // Draw elements
drawBall();
drawBricks();
drawPaddle(playerPaddle.x, playerPaddle.y, playerPaddle.width, playerPaddle.height);
drawPaddle(enemyPaddle.x, enemyPaddle.y, enemyPaddle.width, enemyPaddle.height);

            // Draw score
            ctx.font = "16px Arial";
            ctx.fillStyle = "#fff";
            ctx.fillText("Score: " + score, 8, 20);

            // Ball movement
            ball.x += ball.dx;
            ball.y += ball.dy;

            // Paddle movement
            enemyPaddle.y += (ball.y - (enemyPaddle.y + enemyPaddle.height / 2)) * 0.05;

            // Ball collision with canvas boundaries
            if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) {
                ball.dy = -ball.dy; // Reverse ball direction
            }

            // Ball collision with paddles and bricks
            collisionDetection();

            requestAnimationFrame(draw);
        }

        // Run the draw function
        draw();
    </script>
</body>
</html>
