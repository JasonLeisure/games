<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Realistic Stacking and Toppling</title>
  <style>
    body { margin: 0; overflow: hidden; }
    canvas { display: block; }
  </style>
</head>
<body>
  <canvas id="game-canvas"></canvas>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cannon.js/0.6.2/cannon.min.js"></script>
  <script>
    const sceneWidth = window.innerWidth;
    const sceneHeight = window.innerHeight;
    const boxSize = 2;
    const stackHeight = 10;

    let scene, camera, renderer, world, stack = [];
    let isStacking = true;

    function init() {
      scene = new THREE.Scene();

      camera = new THREE.PerspectiveCamera(75, sceneWidth / sceneHeight, 0.1, 1000);
      camera.position.set(5, 10, 15);
      camera.lookAt(0, 0, 0);

      renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('game-canvas') });
      renderer.setSize(sceneWidth, sceneHeight);

      // Add a directional light (simulating sunlight)
      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
      directionalLight.position.set(1, 1, 1);
      scene.add(directionalLight);

      // Add ambient light for better overall lighting
      const ambientLight = new THREE.AmbientLight(0x404040);
      scene.add(ambientLight);

      world = new CANNON.World();
      world.gravity.set(0, -30, 0);

      const groundShape = new CANNON.Plane();
      const groundBody = new CANNON.Body({ mass: 0 });
      groundBody.addShape(groundShape);
      groundBody.position.set(0, 0, 0);
      world.addBody(groundBody);

      createRandomStack(stackHeight);
      animate();
    }

    function getRandom(min, max) {
      return Math.random() * (max - min) + min;
    }

    function createRandomBox(x, y, z) {
      const sizeX = boxSize;
      const sizeY = getRandom(1, boxSize * 2);
      const sizeZ = boxSize;

      const geometry = new THREE.BoxGeometry(sizeX, sizeY, sizeZ);
      const material = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true });
      const mesh = new THREE.Mesh(geometry, material);
      mesh.position.set(x, y, z);
      scene.add(mesh);

      const shape = new CANNON.Box(new CANNON.Vec3(sizeX / 2, sizeY / 2, sizeZ / 2));
      const body = new CANNON.Body({ mass: 1 });
      body.addShape(shape);
      body.position.set(x, y, z);
      world.addBody(body);

      stack.push({ mesh, body });
    }

    function createRandomStack(height) {
      for (let i = 0; i < height; i++) {
        createRandomBox(0, i * boxSize, 0);
      }
    }

    function animate() {
      requestAnimationFrame(animate);

      if (isStacking && stack.length < stackHeight) {
        createRandomBox(0, (stack.length * boxSize), 0);
      }

      world.step(1 / 60);

      stack.forEach((box) => {
        box.mesh.position.copy(box.body.position);
        box.mesh.quaternion.copy(box.body.quaternion);

        // Check if a box has toppled
        if (box.mesh.position.y < -1) {
          isStacking = false; // Stop stacking
          box.mesh.material.color.set(0x00ff00); // Change color of toppled box
        }
      });

      renderer.render(scene, camera);
    }

    window.onload = init;
  </script>
</body>
</html>
